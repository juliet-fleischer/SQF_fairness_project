test.set <- cpw.data[idx.test, ]
form.basic <-  WEAPON_FOUND_FLAG ~
p(SUSPECT_REPORTED_AGE, pen = "lasso") +
p(STOP_LOCATION_BORO_NAME, pen = "grouplasso") +
SUSPECT_SEX +
p(SUSPECT_RACE_DESCRIPTION, pen = "grouplasso") +
LOCATION_IN_OUT_CODE +
STOP_WAS_INITIATED +
p(MONTH2, pen = "grouplasso") +
p(DAY2, pen = "grouplasso") +
STOP_DURATION_MINUTES + OFFICER_EXPLAINED_STOP_FLAG +
OFFICER_IN_UNIFORM_FLAG + ASK_FOR_CONSENT_FLG + CONSENT_GIVEN_FLG +
SUSPECT_HEIGHT + SUSPECT_WEIGHT +
p(SUSPECT_BODY_BUILD_TYPE, pen = "grouplasso") +
p(SUSPECT_EYE_COLOR, pen = "grouplasso") +
p(SUSPECT_HAIR_COLOR, pen = "grouplasso") +
p(STOP_LOCATION_PRECINCT, pen = "grouplasso")
model_grouplasso_cv <- glmsmurf(formula = form.basic,
family = "binomial", data = train.set,
lambda = "cv.mse")
table(cpw.data$SUSPECT_HAIR_COLOR)
table(sqf.data$SUSPECT_HAIR_COLOR)
table(sqf.2023$SUSPECT_HAIR_COLOR)
table(sqf.2023$SUSPECT_EYE_COLOR)
eye.color <- c("MAR", "MUL", "PNK", "OTH")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/program/data_cleaning.R")
### --- logistic regression --- ###
# leave 10 % out for testing the fairness definitions
set.seed(103)
idx.test <- sample(1:nrow(cpw.data), ceiling(0.1 * nrow(cpw.data)))
test.set <- cpw.data[idx.test, ]
train.set <- cpw.data[-idx.test, ]
form.basic <-  WEAPON_FOUND_FLAG ~
p(SUSPECT_REPORTED_AGE, pen = "lasso") +
p(STOP_LOCATION_BORO_NAME, pen = "grouplasso") +
SUSPECT_SEX +
p(SUSPECT_RACE_DESCRIPTION, pen = "grouplasso") +
LOCATION_IN_OUT_CODE +
STOP_WAS_INITIATED +
p(MONTH2, pen = "grouplasso") +
p(DAY2, pen = "grouplasso") +
STOP_DURATION_MINUTES + OFFICER_EXPLAINED_STOP_FLAG +
OFFICER_IN_UNIFORM_FLAG + ASK_FOR_CONSENT_FLG + CONSENT_GIVEN_FLG +
SUSPECT_HEIGHT + SUSPECT_WEIGHT +
p(SUSPECT_BODY_BUILD_TYPE, pen = "grouplasso") +
p(SUSPECT_EYE_COLOR, pen = "grouplasso") +
p(SUSPECT_HAIR_COLOR, pen = "grouplasso") +
p(STOP_LOCATION_PRECINCT, pen = "grouplasso")
model_grouplasso_cv <- glmsmurf(formula = form.basic,
family = "binomial", data = train.set,
lambda = "cv.mse")
form.basic <-  WEAPON_FOUND_FLAG ~
p(SUSPECT_REPORTED_AGE, pen = "lasso") +
p(STOP_LOCATION_BORO_NAME, pen = "grouplasso") +
SUSPECT_SEX +
p(SUSPECT_RACE_DESCRIPTION, pen = "grouplasso") +
LOCATION_IN_OUT_CODE +
STOP_WAS_INITIATED +
p(MONTH2, pen = "grouplasso") +
p(DAY2, pen = "grouplasso") +
STOP_DURATION_MINUTES + OFFICER_EXPLAINED_STOP_FLAG +
OFFICER_IN_UNIFORM_FLAG + ASK_FOR_CONSENT_FLG + CONSENT_GIVEN_FLG +
SUSPECT_HEIGHT + SUSPECT_WEIGHT +
p(SUSPECT_BODY_BUILD_TYPE, pen = "grouplasso") +
p(SUSPECT_EYE_COLOR, pen = "grouplasso") +
p(SUSPECT_HAIR_COLOR, pen = "grouplasso")
model_grouplasso_cv <- glmsmurf(formula = form.basic,
family = "binomial", data = train.set,
lambda = "cv.mse")
str(sqf.2023)
targets
table(sqf.2023$SUSPECT_RACE_DESCRIPTION)
table(sqf.2023$SUSPECT_SEX)
names(imputed_data)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/setup.R")
head(imputed_data)
str(imputed_data)
table(imputed_data$SUSPECT_SEX)
imputed_data$SUSPECT_SEX <- factor(imputed_data$SUSPECT_SEX)
table(imputed_data$SUSPECT_SEX)
imputed_data$SUSPECT_RACE_DESCRIPTION <- factor(imputed_data$SUSPECT_RACE_DESCRIPTION)
is.character(imputed_data)
lapply(imputed_data, is.character)
sapply(imputed_data, is.character)
imputed_data[, sapply(imputed_data, is.character)]
imputed_data[, sapply(imputed_data, is.character)] <- lapply(imputed_data[, sapply(imputed_data, is.character)], as.factor)
str(imputed_data)
table(imputed_data$SUSPECT_SEX)
writexl::write_xlsx(imputed_data, "data/imputed_data.xlsx")
imputed_data <- read_excel("data/imputed_data.xlsx")
str(imputed_data)
?read_excel
imputed_data[, sapply(imputed_data, is.character)] <- lapply(imputed_data[, sapply(imputed_data, is.character)], as.factor)
str(imputed_data)
PA <- "sex"
if( PA == "sex") {
imputed_data_g <- imputed_data
} else {
g <- "race_group_d"
f.to.remove <- setdiff(race.grouping, g)
imputed_data_g <- imputed_data[, !names(imputed_data) %in% f.to.remove]
imputed_data_g[[g]]<- factor(imputed_data_g[[g]])
}
imputed_data_g
all.equal(imputed_data, imputed_data_g)
# initialize a classification task
tsk_sqf <- as_task_classif(imputed_data_g, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "STOP_ID")
# specify the PA
tsk_sqf$col_roles$pta <- "SUSPECT_SEX"
# create train train split
splits <- partition(tsk_sqf)
# initialize a learner
p <- ncol(imputed_data_g) - 1
lrn_rf <- lrn("classif.ranger", mtry = ceiling(p / 2), predict_type = "prob", importance = "impurity")
# train learner
lrn_rf$train(tsk_sqf, row_ids = splits$train)
# make predictions on test data
predictions <- lrn_rf$predict(tsk_sqf, row_ids = splits$test)
# Defines punitive base measures
base_mrs_punitive <- list(
fpr = msr("classif.fpr"),
tnr = msr("classif.tnr"),
ppv = msr("classif.ppv"),
fdr = msr("classif.fdr")
)
# Define multiple base measures
base_mrs_assistive <- list(
fnr = msr("classif.fnr"),
tpr = msr("classif.tpr"),
npv = msr("classif.npv"),
fomr = msr("classif.fomr")
)
# define mixed base measures
base_mrs_other <- list(
acc = msr("classif.acc"),
auc = msr("classif.auc"),
bbrier = msr("classif.bbrier")
)
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/program/functions.R")
# Defines punitive base measures
base_mrs_punitive <- list(
fpr = msr("classif.fpr"),
tnr = msr("classif.tnr"),
ppv = msr("classif.ppv"),
fdr = msr("classif.fdr")
)
# Define multiple base measures
base_mrs_assistive <- list(
fnr = msr("classif.fnr"),
tpr = msr("classif.tpr"),
npv = msr("classif.npv"),
fomr = msr("classif.fomr")
)
# define mixed base measures
base_mrs_other <- list(
acc = msr("classif.acc"),
auc = msr("classif.auc"),
bbrier = msr("classif.bbrier")
)
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_assistive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_other, tsk_sqf)
table(imputed_data_g$SUSPECT_SEX)
# initialize fairness measure
# punitive
fairness_msr_punitive <- msrs(c("fairness.fpr","fairness.tnr","fairness.ppv"))
# "fairness.fdr" (not implemented but should be as equivalent for fairness.fomr)
predictions$score(fairness_msr_punitive, task = tsk_sqf)
# assistive
fairness_msr_assistive <- msrs(c("fairness.fnr","fairness.tpr", "fairness.npv",
"fairness.fomr"))
predictions$score(fairness_msr_assistive, task = tsk_sqf)
# in between
fairness_mrs_other <- msrs(c("fairness.acc", "fairness.cv", "fairness.eod"))
predictions$score(fairness_mrs_other, task = tsk_sqf)
lrn_rf
tsk_sqf
str(imputed_data_g)
table(imputed_data_g$SUSPECT_RACE_DESCRIPTION)
source("program/functions.R")
str(imputed_data_g)
imputed_data_g |> group_by(SUSPECT_SEX) |> summarise(sum(SUSPECT_ARRESTED_FLAG))
table(imputed_data_g$SUSPECT_SEX)
402 / 1021
4486 / 15903
predictions
fairness_prediction_density(predictions, task = tsk_sqf)
compare_metrics(predictions, fairness_msr_punitive, task = tsk_sqf)
compare_metrics(predictions, fairness_msr_assistive, task = tsk_sqf)
compare_metrics(predictions, fairness_mrs_other, task = tsk_sqf)
fair_tpr = msr("fairness", base_measure = msr("classif.tpr"),
range = c(0, 1))
fair_tpr
predictions$score(fair_tpr, task = tsk_sqf))
predictions$score(fair_tpr, task = tsk_sqf)
# assistive
fairness_msr_assistive <- msrs(c("fairness.fnr","fairness.tpr", "fairness.npv",
"fairness.fomr"))
predictions$score(fairness_msr_assistive, task = tsk_sqf)
calcGroupwiseMetrics(base_mrs_assistive, tsk_sqf)
0.3163197 - 0.3888889
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
table(imputed_data_g)
table(imputed_data_g$SUSPECT_SEX)
1021 / 15903
1-0.06420172
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
predictions$score(measures, task = tsk_sqf)
classic.mrs
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
# "fairness.fdr" (not implemented but should be as equivalent for fairness.fomr)
predictions$score(fairness_msr_punitive, task = tsk_sqf)
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
names(imputed_data)
names(sqf.2023)
table(sqf.2023$SEARCHED_FLAG)
table(sqf.2023$FRISKED_FLAG)
table(sqf.2023$SUMMONS_ISSUED_FLAG)
table(sqf.2023$SUSPECT_ARRESTED_FLAG)
names(imputed_data)
protected.a
features
# create subset of the data for frisked as target
sqf.2023.subset2 <- subset(sqf.2023, select = c("FRISKED_FLAG", protected.a, features))
# imputed missing data
imp2 <- mice(sqf.2023.subset3, m = 1)
sqf.2023.subset2 <- subset(sqf.2023, select = c("FRISKED_FLAG", protected.a, features))
# imputed missing data
imp2 <- mice(sqf.2023.subset2, m = 1)
imputed_data <- complete(imp2)
imputed_data
summary(sqf.2023)
source("program/data_cleaning.R")
source("program/functions.R")
summary(sqf.2023)
# create subset of the data for frisked as target
sqf.2023.subset2 <- subset(sqf.2023, select = c("FRISKED_FLAG", protected.a, features))
summary(sqf.2023.subset2)
# imputed missing data
imp2 <- mice(sqf.2023.subset2, m = 1)
str(imputed_data)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/setup.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/setup.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/setup.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/setup.R")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/01_Studium/13_Jahr_03/21_TrustML/NYPD_SQF_data/setup.R")
set.seed(513)
names(imputed_data)
sqf.2023.subset2 <- subset(sqf.2023, select = c("FRISKED_FLAG", protected.a, features))
# imputed missing data
imp2 <- mice(sqf.2023.subset2, m = 1)
imputed_data <- complete(imp2)
names(imputed_data)
PA <- "SUSPECT_SEX"
target <- "FRISKED_FLAG"
if( PA == "SUSPECT_SEX") {
imputed_data_g <- imputed_data
tsk_sqf$col_roles$pta <- PA
} else {
g <- "race_group_d"
f.to.remove <- setdiff(race.grouping, g)
imputed_data_g <- imputed_data[, !names(imputed_data) %in% f.to.remove]
imputed_data_g[[g]]<- factor(imputed_data_g[[g]])
tsk_sqf$col_roles$pta <- g
}
PA <- "SUSPECT_SEX"
target <- "FRISKED_FLAG"
# initialize a classification task
tsk_sqf <- as_task_classif(imputed_data_g, target = target,
positive = "1", id = "STOP_ID")
if( PA == "SUSPECT_SEX") {
imputed_data_g <- imputed_data
tsk_sqf$col_roles$pta <- PA
} else {
g <- "race_group_d"
f.to.remove <- setdiff(race.grouping, g)
imputed_data_g <- imputed_data[, !names(imputed_data) %in% f.to.remove]
imputed_data_g[[g]]<- factor(imputed_data_g[[g]])
tsk_sqf$col_roles$pta <- g
}
# create train train split
splits <- partition(tsk_sqf)
# initialize a learner
p <- ncol(imputed_data_g) - 1
lrn_rf <- lrn("classif.ranger", mtry = ceiling(p / 2), predict_type = "prob", importance = "impurity")
# train learner
lrn_rf$train(tsk_sqf, row_ids = splits$train)
# make predictions on test data
predictions <- lrn_rf$predict(tsk_sqf, row_ids = splits$test)
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
predictions$score(measures, task = tsk_sqf)
tsk_sqf
# initialize fairness measure
# punitive
fairness_msr_punitive <- msrs(c("fairness.fpr","fairness.tnr","fairness.ppv"))
# "fairness.fdr" (not implemented but should be as equivalent for fairness.fomr)
predictions$score(fairness_msr_punitive, task = tsk_sqf)
# assistive
fairness_msr_assistive <- msrs(c("fairness.fnr","fairness.tpr", "fairness.npv",
"fairness.fomr"))
predictions$score(fairness_msr_assistive, task = tsk_sqf)
# in between
fairness_mrs_other <- msrs(c("fairness.acc", "fairness.cv", "fairness.eod"))
predictions$score(fairness_mrs_other, task = tsk_sqf)
# Defines punitive base measures
base_mrs_punitive <- list(
fpr = msr("classif.fpr"),
tnr = msr("classif.tnr"),
ppv = msr("classif.ppv"),
fdr = msr("classif.fdr")
)
# Define multiple base measures
base_mrs_assistive <- list(
fnr = msr("classif.fnr"),
tpr = msr("classif.tpr"),
npv = msr("classif.npv"),
fomr = msr("classif.fomr")
)
# define mixed base measures
base_mrs_other <- list(
acc = msr("classif.acc"),
auc = msr("classif.auc"),
bbrier = msr("classif.bbrier")
)
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_assistive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_other, tsk_sqf)
fairness_prediction_density(predictions, task = tsk_sqf)
compare_metrics(predictions, fairness_msr_punitive, task = tsk_sqf)
compare_metrics(predictions, fairness_msr_assistive, task = tsk_sqf)
compare_metrics(predictions, fairness_mrs_other, task = tsk_sqf)
str(imputed_data)
writexl::write_xlsx(imputed_data, path = "data/imputed_data_frisked.xlsx")
features
names(sqf.2023)
unique(sqf.2023)
unique(sqf.2023$BACKROUND_CIRCUMSTANCES_VIOLENT_CRIME_FLAG)
subst <- sqf.2023[, c("FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG", "WEAPON_FOUND_FLAG")]
head(subst)
subst |>
filter(any_of(c("FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG") == "Y") & "WEAPON_FOUND_FLAG" == "N")
subst %>%
mutate(
has_weapon_flag = if_any(c("FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG"), ~ . == "Y")
) %>%
filter(has_weapon_flag & WEAPON_FOUND_FLAG == "N")
subst %>%
mutate(
has_weapon_flag = if_any(c("FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG"), ~ . == "Y")
) %>%
filter(has_weapon_flag & WEAPON_FOUND_FLAG == "N")
subst %>%
mutate(
has_weapon_flag = if_any(c("OTHER_CONTRABAND_FLAG", "FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG"), ~ . == "Y")
) %>%
filter(has_weapon_flag & WEAPON_FOUND_FLAG == "N")
subst <- sqf.2023[, c("OTHER_CONTRABAND_FLAG","FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG", "WEAPON_FOUND_FLAG")]
subst %>%
mutate(
has_weapon_flag = if_any(c("OTHER_CONTRABAND_FLAG", "FIREARM_FLAG", "KNIFE_CUTTER_FLAG", "OTHER_WEAPON_FLAG"), ~ . == "Y")
) %>%
filter(has_weapon_flag & WEAPON_FOUND_FLAG == "N")
names(sqf.2023)
unique(sqf.2023$BACKROUND_CIRCUMSTANCES_VIOLENT_CRIME_FLAG)
unique(sqf.2023$BACKROUND_CIRCUMSTANCES_SUSPECT_KNOWN_TO_CARRY_WEAPON_FLAG)
table(sqf.2023$BACKROUND_CIRCUMSTANCES_SUSPECT_KNOWN_TO_CARRY_WEAPON_FLAG)
table(sqf.2023$BACKROUND_CIRCUMSTANCES_SUSPECT_KNOWN_TO_CARRY_WEAPON_FLAG)
target <- "SUSPECT_ARRESTED_FLAG"
# PAs
protected.a <- c("SUSPECT_REPORTED_AGE", "SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
if (target == "FRISKED_FLAG") {
features <- c("MONTH2", "DAY2", "STOP_FRISK_TIME",
"STOP_LOCATION_BORO_NAME", "LOCATION_IN_OUT_CODE", "STOP_DURATION_MINUTES",
"SUSPECT_HEIGHT", "SUSPECT_WEIGHT", "SUSPECT_BODY_BUILD_TYPE",
"SUSPECT_EYE_COLOR", "SUSPECT_HAIR_COLOR", "STOP_WAS_INITIATED",
"OFFICER_EXPLAINED_STOP_FLAG", "OFFICER_IN_UNIFORM_FLAG",
"ASK_FOR_CONSENT_FLG", "CONSENT_GIVEN_FLG")
} else if (target == "SUSPECT_ARRESTED_FLAG") {
features <- c(features, "WEAPON_FOUND_FLAG")
}
PA <- "SUSPECT_SEX"
features
set.seed(513)
target <- "SUSPECT_ARRESTED_FLAG"
# PAs
protected.a <- c("SUSPECT_REPORTED_AGE", "SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
if (target == "FRISKED_FLAG") {
features <- c("MONTH2", "DAY2", "STOP_FRISK_TIME",
"STOP_LOCATION_BORO_NAME", "LOCATION_IN_OUT_CODE", "STOP_DURATION_MINUTES",
"SUSPECT_HEIGHT", "SUSPECT_WEIGHT", "SUSPECT_BODY_BUILD_TYPE",
"SUSPECT_EYE_COLOR", "SUSPECT_HAIR_COLOR", "STOP_WAS_INITIATED",
"OFFICER_EXPLAINED_STOP_FLAG", "OFFICER_IN_UNIFORM_FLAG",
"ASK_FOR_CONSENT_FLG", "CONSENT_GIVEN_FLG")
} else if (target == "SUSPECT_ARRESTED_FLAG") {
features <- c(features, "WEAPON_FOUND_FLAG")
}
PA <- "SUSPECT_SEX"
features
# create subset of the data for arrested as target
sqf.2023.subset1 <- subset(sqf.2023, select = c("SUSPECT_ARRESTED_FLAG", protected.a, features))
# impute missing data
imp1 <- mice(sqf.2023.subset1, m = 1)
remove(features)
set.seed(513)
target <- "SUSPECT_ARRESTED_FLAG"
# PAs
protected.a <- c("SUSPECT_REPORTED_AGE", "SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
if (target == "FRISKED_FLAG") {
features <- c("MONTH2", "DAY2", "STOP_FRISK_TIME",
"STOP_LOCATION_BORO_NAME", "LOCATION_IN_OUT_CODE", "STOP_DURATION_MINUTES",
"SUSPECT_HEIGHT", "SUSPECT_WEIGHT", "SUSPECT_BODY_BUILD_TYPE",
"SUSPECT_EYE_COLOR", "SUSPECT_HAIR_COLOR", "STOP_WAS_INITIATED",
"OFFICER_EXPLAINED_STOP_FLAG", "OFFICER_IN_UNIFORM_FLAG",
"ASK_FOR_CONSENT_FLG", "CONSENT_GIVEN_FLG")
} else if (target == "SUSPECT_ARRESTED_FLAG") {
features <- c(features, "WEAPON_FOUND_FLAG")
}
set.seed(513)
target <- "SUSPECT_ARRESTED_FLAG"
# PAs
protected.a <- c("SUSPECT_REPORTED_AGE", "SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
features <- c("MONTH2", "DAY2", "STOP_FRISK_TIME",
"STOP_LOCATION_BORO_NAME", "LOCATION_IN_OUT_CODE", "STOP_DURATION_MINUTES",
"SUSPECT_HEIGHT", "SUSPECT_WEIGHT", "SUSPECT_BODY_BUILD_TYPE",
"SUSPECT_EYE_COLOR", "SUSPECT_HAIR_COLOR", "STOP_WAS_INITIATED",
"OFFICER_EXPLAINED_STOP_FLAG", "OFFICER_IN_UNIFORM_FLAG",
"ASK_FOR_CONSENT_FLG", "CONSENT_GIVEN_FLG")
if (target == "SUSPECT_ARRESTED_FLAG") {
features <- c(features, "WEAPON_FOUND_FLAG")
}
PA <- "SUSPECT_SEX"
features
# create subset of the data for arrested as target
sqf.2023.subset1 <- subset(sqf.2023, select = c("SUSPECT_ARRESTED_FLAG", protected.a, features))
# impute missing data
imp1 <- mice(sqf.2023.subset1, m = 1)
imputed_data <- complete(imp1)
str(imputed data)
str(imputed_data)
writexl::write_xlsx(imputed_data, path = "data/imputed_data_arrested.xlsx")
# initialize a classification task
tsk_sqf <- as_task_classif(imputed_data_g, target = target,
positive = "1", id = "STOP_ID")
if( PA == "SUSPECT_SEX") {
imputed_data_g <- imputed_data
#   tsk_sqf$col_roles$pta <- PA
} else {
g <- "race_group_d"
f.to.remove <- setdiff(race.grouping, g)
imputed_data_g <- imputed_data[, !names(imputed_data) %in% f.to.remove]
imputed_data_g[[g]]<- factor(imputed_data_g[[g]])
#  tsk_sqf$col_roles$pta <- g
}
tsk_sqf <- as_task_classif(imputed_data_g, target = target,
positive = "1", id = "STOP_ID")
if( PA == "SUSPECT_SEX") {
tsk_sqf$col_roles$pta <- PA
} else {
tsk_sqf$col_roles$pta <- g
}
PA
tsk_sqf
# create train train split
splits <- partition(tsk_sqf)
# initialize a learner
p <- ncol(imputed_data_g) - 1
lrn_rf <- lrn("classif.ranger", mtry = ceiling(p / 2), predict_type = "prob", importance = "impurity")
# train learner
lrn_rf$train(tsk_sqf, row_ids = splits$train)
# make predictions on test data
predictions <- lrn_rf$predict(tsk_sqf, row_ids = splits$test)
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
predictions$score(measures, task = tsk_sqf)
# initialize fairness measure
# punitive
fairness_msr_punitive <- msrs(c("fairness.fpr","fairness.tnr","fairness.ppv"))
# "fairness.fdr" (not implemented but should be as equivalent for fairness.fomr)
predictions$score(fairness_msr_punitive, task = tsk_sqf)
# assistive
fairness_msr_assistive <- msrs(c("fairness.fnr","fairness.tpr", "fairness.npv",
"fairness.fomr"))
predictions$score(fairness_msr_assistive, task = tsk_sqf)
# in between
fairness_mrs_other <- msrs(c("fairness.acc", "fairness.cv", "fairness.eod"))
predictions$score(fairness_mrs_other, task = tsk_sqf)
# Defines punitive base measures
base_mrs_punitive <- list(
fpr = msr("classif.fpr"),
tnr = msr("classif.tnr"),
ppv = msr("classif.ppv"),
fdr = msr("classif.fdr")
)
# Define multiple base measures
base_mrs_assistive <- list(
fnr = msr("classif.fnr"),
tpr = msr("classif.tpr"),
npv = msr("classif.npv"),
fomr = msr("classif.fomr")
)
# define mixed base measures
base_mrs_other <- list(
acc = msr("classif.acc"),
auc = msr("classif.auc"),
bbrier = msr("classif.bbrier")
)
calcGroupwiseMetrics(base_mrs_punitive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_assistive, tsk_sqf)
calcGroupwiseMetrics(base_mrs_other, tsk_sqf)
fairness_prediction_density(predictions, task = tsk_sqf)
