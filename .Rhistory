# run experiment
lrns = list(lrn_rpart, l1, l2, l3)
# run experiment
lrns = list(lrn_rf, l1, l2, l3)
bmr = benchmark(benchmark_grid(tsk_arrest, lrns, rsmp("cv", folds = 2)))
install.packages("CVXR")
library(CVXR)
meas = msrs(c("classif.acc", "fairness.eod"))
bmr$aggregate(meas)[,
.(learner_id, classif.acc, fairness.equalized_odds)]
bmr = benchmark(benchmark_grid(tsk_arrest, lrns, rsmp("cv", folds = 2)))
meas = msrs(c("classif.acc", "fairness.eod"))
bmr$aggregate(meas)[,
.(learner_id, classif.acc, fairness.equalized_odds)]
source("~/Documents/NYPD_SQF_data/setup.R")
glimpse(sqf.2023)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
targets <- c("SUSPECT_ARRESTED_FLAG", "SEARCHED_FLAG", "FRISKED_FLAG")
protected.a <- c("SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
glimpse(sqf.2023)
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
glimpse(sqf.2023)
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT")
sqf.2023[ , (cols.to.remove) := NULL])]
sqf.2023[ , (cols.to.remove) := NULL]
glimpse(sqf.2023)
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
char.cols
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT")
sqf.2023[ , (cols.to.remove) := NULL]
# convert al columns with numbers to numeric
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
glimpse(sqf.2023)
grepl("[[:digit:]]+", "804")
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
sqf.2023[, (char.cols) := lapply(.SD, as.factor), .SDcols = char.cols]
glimpse(sqf.2023)
library(glmnet)
x <- model.matrix(SUSPECT_ARRESTED ~ ., data = sqf.2023)
x <- model.matrix(ARRESTED_FLAG ~ ., data = sqf.2023)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
y <- sqf.2023$SUSPECT_ARRESTED_FLAG
lasso.cv <- cv.glmnet(x, y, family = binomial(link = "logit"), alpha = 1)
set.seed(123)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
apply(sqf.2023, 2, function(x) (length(unique(x))))
res <- apply(sqf.2023, 2, function(x) (length(unique(x))))
which(res == 1)
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT", "YEAR2", "RECORD_STATUS_CODE")
sqf.2023[ , (cols.to.remove) := NULL]
# fit a logistic regression with LASSO regularization
set.seed(123)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
res <- apply(sqf.2023, 2, function(x) (length(unique(x))))
which(res == 1)
levels(sqf.2023)
levels(sqf.2023$SUSPECT_ARREST_FLAG)
levels(sqf.2023$SUSPECT_ARREST_FLAG)
str(sqf.2023$SUSPECT_ARREST_FLAG)
str(sqf.2023$SUSPECT_ARRESTED_FLAG)
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
set.seed(123)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
res <- apply(sqf.2023, 2, function(x) (length(levels(x))))
which(res == 1)
res
levels(sqf.2023$LOCATION_IN_OUT_CODE)
length(levels(sqf.2023$LOCATION_IN_OUT_CODE))
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT", "YEAR2", "RECORD_STATUS_CODE")
sqf.2023[ , (cols.to.remove) := NULL]
# convert al columns with numbers to numeric
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
sqf.2023[, (char.cols) := lapply(.SD, as.factor), .SDcols = char.cols]
# fit a logistic regression with LASSO regularization
set.seed(123)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
sapply(lapply(sqf.2023, unique), length)
res <- sapply(lapply(sqf.2023, unique), length)
which(res == 1)
which(res == 2)
sort(res)
library(glmnet)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT", "YEAR2", "RECORD_STATUS_CODE")
sqf.2023[ , (cols.to.remove) := NULL]
# convert al columns with numbers to numeric
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
sqf.2023[, (char.cols) := lapply(.SD, as.factor), .SDcols = char.cols]
# fit a logistic regression with LASSO regularization
set.seed(123)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
unique(sqf.2023$SUPERVISING_ACTION_CORRESPONDING_ACTIVITY_LOG_ENTRY_REVIEWED)
# fit a logistic regression with LASSO regularization
set.seed(123)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)[, -1]
x
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
x
sqf.2023[!is.na(sqf.2023$SUSPECT_ARRESTED_FLAG), ]
sqf.2023 <- sqf.2023[!is.na(sqf.2023$SUSPECT_ARRESTED_FLAG), ]
sapply(sqf.2023, function(x) {
if (is.factor(x)) {
table(x)
} else {
NULL
}
})
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
sapply(sqf.2023, function(x) {
if (is.factor(x)) {
table(x)
} else {
NULL
}
})
?as.formula
lasso.form <- as.formula("SUSPECT_ARRESTED_FLAG ~ .")
LIBRARY(smurf)
library(smurf)
library(glmnet)
library(smurf)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
glimpse(sqf.2023)
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
sqf.2023 <- droplevels(sqf.2023)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
colSums(is.na(sqf.2023))
sqf.2023 <- na.omit(sqf.2023)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
colSums(is.na(sqf.2023))
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
sqf.2023 <- droplevels(sqf.2023)
colSums(is.na(sqf.2023))
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
colSums(is.na(sqf.2023))
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
y <- sqf.2023$SUSPECT_ARRESTED_FLAG
lasso.cv <- cv.glmnet(x, y, family = binomial(link = "logit"), alpha = 1)
x
dim(x)
sqf.2023 <- na.omit(sqf.2023)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
y <- sqf.2023$SUSPECT_ARRESTED_FLAG
lasso.cv <- cv.glmnet(x, y, family = binomial(link = "logit"), alpha = 1)
lasso.cv$lambda
lasso.cv$lambda.min
lambda.lasso <- lasso.cv$lambda.min
lasso.fit <- glmnet(x, y, family = binomial(link = "logit"), alpha = 1, lambda = lambda.lasso)
summary(lasso.fit)
coef(lasso.fit)
library(glmnet)
library(smurf)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT", "YEAR2", "RECORD_STATUS_CODE", "STOP_LOCATION_STREET_NAME")
sqf.2023[ , (cols.to.remove) := NULL]
# convert al columns with numbers to numeric
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
sqf.2023[, (char.cols) := lapply(.SD, as.factor), .SDcols = char.cols]
# fit a logistic regression with LASSO regularization
set.seed(123)
sqf.2023 <- droplevels(sqf.2023)
colSums(is.na(sqf.2023))
sqf.2023 <- na.omit(sqf.2023)
library(glmnet)
library(smurf)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
# delete a few columns that wouldn't make sense as features
cols.to.remove <- c("STOP_ID", "STOP_FRISK_DATE", "STOP_FRISK_TIME", "DEMEANOR_OF_PERSON_STOPPED",
"SUSPECT_OTHER_DESCRIPTION", "STOP_LOCATION_FULL_ADDRESS", "STOP_LOCATION_X",
"STOP_LOCATION_Y", "STOP_LOCATION_APARTMENT", "YEAR2", "RECORD_STATUS_CODE", "STOP_LOCATION_STREET_NAME")
sqf.2023[ , (cols.to.remove) := NULL]
# convert al columns with numbers to numeric
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# convert al remaining character columns to factor
char.cols <- which(sapply(sqf.2023, is.character))
sqf.2023[, (char.cols) := lapply(.SD, as.factor), .SDcols = char.cols]
# fit a logistic regression with LASSO regularization
set.seed(123)
sqf.2023 <- droplevels(sqf.2023)
colSums(is.na(sqf.2023))
sort(colSums(is.na(sqf.2023)))
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
# setup script
set.seed(024)
library(data.table)
library(readxl)
library(ggplot2)
library(pROC)
library(tidyverse)
library(mlr3verse)
library(mlr3fairness)
library(mice)
library(checkmate)
library(iml)
library(fairml)
library(linprog)
library(CVXR)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
na.count
sum(is.na(sqf.2023$STOP_LOCATION_BORO_NAME))
sort(na.count)
sum(is.na(sqf.2023$PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG))
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sum(sqf.2023$PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG == "(null)")
sum(sqf.2023$PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG == "(null )")
sum(sqf.2023$PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG == "( null )")
sum(sqf.2023$PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG == "( null)")
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
sqf.2023[, sum(is.na(.SD)) / .N, .SDcols = names(sqf.2023)]
sqf.2023[, sum(is.na(.SD)), .SDcols = names(sqf.2023)]
sqf.2023[, function(x) sum(is.na(x)) / nrow(sqf.2023), .SDcols = names(sqf.2023)]
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
which(na.count < 0.5)
names(which(na.count < 0.5))
n
which(na.count > 0.5)
length(which(na.count > 0.5))
length(which(na.count > 0.5)) / ncol(sqf.2023)
names(which(na.count < 0.5))
sort(na.count)
table(sqf.2023$JURISDICTION_CODE)
table(sqf.2023$JURISDICTION_DESCRIPTION)
enough.data.cols <- names(which(na.count < 0.5))
enough.data.cols
sqf.2023 <- sqf.2023[, enough.data.cols]
sqf.2023[, names(sqf.2023) %in% enough.data.cols]
cols.to.keep <- sqf.2023[, names(sqf.2023) %in% enough.data.cols]
sqf.2023[, cols.to.keep]
sqf.2023[, (cols.to.keep)]
sqf.2023[, ..cols.to.keep]
sqf.2023 <- sqf.2023[, ..cols.to.keep]
enough.data.cols
# remove all officer columns
pattern.officer <- "[:alpha:]*_OFFICER_[:alpha:]*"
officer.cols <- grep(pattern.officer, names(sqf.2023))
officer.cols
glimpse(sqf.2023)
sqf.2023$JURISDICTION_CODE
sqf.2023$OFFICER_NOT_EXPLAINED_STOP_DESCRIPTION
sqf.2023$SUSPECT_ARREST_OFFENSE
sqf.2023$SUSPECTED_CRIME_DESCRIPTION
sqf.2023$OFFICER_NOT_EXPLAINED_STOP_DESCRIPTION
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
enough.data.cols <- names(which(na.count < 0.5))
cols.to.keep <- sqf.2023[, names(sqf.2023) %in% enough.data.cols]
sqf.2023 <- sqf.2023[, ..cols.to.keep]
targets <- c("SUSPECT_ARRESTED_FLAG", "SEARCHED_FLAG", "FRISKED_FLAG")
protected.a <- c("SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
# remove all officer columns
# pattern.officer <- "[:alpha:]*_OFFICER_[:alpha:]*"
# officer.cols <- grep(pattern.officer, names(sqf.2023))
# sqf.2023[, (officer.cols) := NULL]
# # remove all location columns except STOP_LOCATION_BORO_NAME
# pattern.location <- "[:alpha:]*_LOCATION_[:alpha:]*"
# location.cols <- grep(pattern.location, names(sqf.2023))
# sqf.2023[, (location.cols[-length(location.cols)]) := NULL]
# remove all columns that start with PHYSICAL_FORCE
# pattern.force <- "PHYSICAL_FORCE[:alpha:]*"
# force.cols <- grep(pattern.force, names(sqf.2023))
# sqf.2023[, (force.cols) := NULL]
# remove all columns relted to summons
# pattern.summons <- "SUMMONS[:alpha:]*"
# summons.cols <- grep(pattern.summons, names(sqf.2023))
# sqf.2023[, (summons.cols) := NULL]
# remove all columns without specifc pattern
sqf.2023$YEAR2 <- NULL
sqf.2023$STOP_FRISK_DATE <- NULL
sqf.2023$RECORD_STATUS_CODE <- NULL
sqf.2023$DEMEANOR_OF_PERSON_STOPPED <- NULL
sqf.2023$SUPERVISING_ACTION_CORRESPONDING_ACTIVITY_LOG_ENTRY_REVIEWED <- NULL
sqf.2023$JURISDICTION_CODE <- NULL
sqf.2023$OFFICER_NOT_EXPLAINED_STOP_DESCRIPTION <- NULL
sqf.2023$SUSPECT_OTHER_DESCRIPTION <- NULL
sqf.2023$SUSPECT_ARREST_OFFENSE <- NULL
complete.cases(sqf.2023)
dim(complete.cases(sqf.2023))
# filter out complete cases
sqf.2023[, complete.cases(sqf.2023)]
# filter out complete cases
sqf.2023[, ..complete.cases(sqf.2023)]
# filter out complete cases
sqf.2023[complete.cases(sqf.2023), ]
# filter out complete cases
complete.cases <- sqf.2023[complete.cases(sqf.2023), ]
complete.cases
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = complete.cases)
summary(complete.cases)
sort(colSums(is.na(complete.cases)))
res <- apply(complete.cases, 2, function(x) (length(levels(x))))
which(res == 1)
res
glimpse(complete.cases)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
enough.data.cols <- names(which(na.count < 0.5))
cols.to.keep <- sqf.2023[, names(sqf.2023) %in% enough.data.cols]
sqf.2023 <- sqf.2023[, ..cols.to.keep]
targets <- c("SUSPECT_ARRESTED_FLAG", "SEARCHED_FLAG", "FRISKED_FLAG")
protected.a <- c("SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
# remove all officer columns
# pattern.officer <- "[:alpha:]*_OFFICER_[:alpha:]*"
# officer.cols <- grep(pattern.officer, names(sqf.2023))
# sqf.2023[, (officer.cols) := NULL]
# # remove all location columns except STOP_LOCATION_BORO_NAME
# pattern.location <- "[:alpha:]*_LOCATION_[:alpha:]*"
# location.cols <- grep(pattern.location, names(sqf.2023))
# sqf.2023[, (location.cols[-length(location.cols)]) := NULL]
# remove all columns that start with PHYSICAL_FORCE
# pattern.force <- "PHYSICAL_FORCE[:alpha:]*"
# force.cols <- grep(pattern.force, names(sqf.2023))
# sqf.2023[, (force.cols) := NULL]
# remove all columns relted to summons
# pattern.summons <- "SUMMONS[:alpha:]*"
# summons.cols <- grep(pattern.summons, names(sqf.2023))
# sqf.2023[, (summons.cols) := NULL]
# remove all columns without specifc pattern
sqf.2023$YEAR2 <- NULL
sqf.2023$STOP_FRISK_DATE <- NULL
sqf.2023$RECORD_STATUS_CODE <- NULL
sqf.2023$DEMEANOR_OF_PERSON_STOPPED <- NULL
sqf.2023$SUPERVISING_ACTION_CORRESPONDING_ACTIVITY_LOG_ENTRY_REVIEWED <- NULL
sqf.2023$JURISDICTION_CODE <- NULL
# filter out complete cases
sqf.2023 <- sqf.2023[complete.cases(sqf.2023), ]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# go through each column an check whether it matches alpha or digit
# if it matches digit, convert it to numeric
col.names <- names(sqf.2023)[-c(1,2)]
# Apply the transformation to all columns that match the pattern
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
# convert all potential target columns to numeric
sqf.2023[ , (targets) := lapply(.SD,function(x) { ifelse(x == "Y", 1, 0)}), .SDcols = targets]
# convert sex to numeric 0 = female, 1 = male
sqf.2023[, SUSPECT_SEX := ifelse(SUSPECT_SEX == "FEMALE", 0, 1)]
# create factor columns
sqf.2023$SUSPECT_RACE_DESCRIPTION <- factor(sqf.2023$SUSPECT_RACE_DESCRIPTION,
levels = c("BLACK", "WHITE HISPANIC", "BLACK HISPANIC",
"WHITE","ASIAN / PACIFIC ISLANDER",
"MIDDLE EASTERN/SOUTHWEST ASIAN",
"AMERICAN INDIAN/ALASKAN NATIVE"))
sqf.2023$STOP_LOCATION_BORO_NAME <- factor(sqf.2023$STOP_LOCATION_BORO_NAME)
sqf.2023$LOCATION_IN_OUT_CODE <- factor(sqf.2023$LOCATION_IN_OUT_CODE)
sqf.2023$STOP_WAS_INITIATED <- factor(sqf.2023$STOP_WAS_INITIATED)
sqf.2023$MONTH2 <- factor(sqf.2023$MONTH2)
sqf.2023$DAY2 <- factor(sqf.2023$DAY2)
sqf.2023$SUSPECT_BODY_BUILD_TYPE <- factor(sqf.2023$SUSPECT_BODY_BUILD_TYPE)
sqf.2023$SUSPECT_EYE_COLOR <- factor(sqf.2023$SUSPECT_EYE_COLOR)
sqf.2023$SUSPECT_HAIR_COLOR <- factor(sqf.2023$SUSPECT_HAIR_COLOR)
sqf.2023$JURISDICTION_DESCRIPTION <- factor(sqf.2023$JURISDICTION_DESCRIPTION)
# binning of stop time of the day
# 6 - 12: AM
# 12 - 18: PM
# 18 - 22: evening
# 22 - 6 : night
# convert times to numeric values
sqf.2023 <- sqf.2023 |>
mutate(STOP_FRISK_TIME = sub(":", ".", substr(STOP_FRISK_TIME, 1, 5))) |>
mutate(STOP_FRISK_TIME = round(as.numeric(STOP_FRISK_TIME))) |>
mutate(STOP_FRISK_TIME = ifelse(STOP_FRISK_TIME == 24, 0, STOP_FRISK_TIME))
# bin time
sqf.2023$STOP_FRISK_TIME <- cut(
sqf.2023$STOP_FRISK_TIME,
breaks = c(0, 6, 12, 18, 24),
labels = c("night", "AM", "PM", "evening"),
right = FALSE
)
# remove levels that are very rare
hair.color <- c("GRN", "PLE", "PNK", "ORG", "SDY")
eye.color <- c("MAR", "MUL", "PNK", "OTH")
sqf.2023 <- sqf.2023 |>
filter(!SUSPECT_HAIR_COLOR %in% hair.color) |>
filter(!SUSPECT_EYE_COLOR %in% eye.color)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
res <- apply(sqf.2023, 2, function(x) (length(levels(x))))
which(res == 1)
glimpse(sqf.2023)
apply(sqf.2023, 2, \(x) length(unique(x)))
sqf.2023$PHYSICAL_FORCE_VERBAL_INSTRUCTION_FLAG <- NULL
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
y <- complete.cases$SUSPECT_ARRESTED_FLAG
lasso.cv <- cv.glmnet(x, y, family = binomial(link = "logit"), alpha = 1)
library(glmnet)
library(smurf)
lasso.cv <- cv.glmnet(x, y, family = binomial(link = "logit"), alpha = 1)
x <- model.matrix(SUSPECT_ARRESTED_FLAG ~ ., data = sqf.2023)
y <- sqf.2023$SUSPECT_ARRESTED_FLAG
lasso.cv <- cv.glmnet(x, y, family = binomial(link = "logit"), alpha = 1)
lambda.lasso
lasso.cv
lambda.lasso <- lasso.cv$lambda.min
lambda.lasso
lasso.cv$lambda
lasso.fit <- glmnet(x, y, family = binomial(link = "logit"), alpha = 1, lambda = lambda.lasso)
summary(lasso.fit)
coef(lasso.fit)
