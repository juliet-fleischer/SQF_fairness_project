sqf.2023[, (19:38) := lapply(.SD, function(x) {
ifelse(is.na(x), "N", x)
}), .SDcols = 19:38]
# convert all the columns that end on FLAG or FLG to factor
flag.cols <- grep("FLAG$|FLG$", names(sqf.2023))
sqf.2023[, (flag.cols) := lapply(.SD, as.factor), .SDcols = flag.cols]
# convert all the columns with numbers to numeric
pattern.numeric <- "[[:digit:]]+"
numeric.cols <- grep(pattern.numeric, names(sqf.2023))
numeric.cols
sqf.2023
glimpse(sqf.2023)
# convert all the columns with numbers to numeric
pattern.numeric <- "[[:digit:]]*"
numeric.cols <- grep(pattern.numeric, names(sqf.2023))
numeric.cols
# convert all the columns with numbers to numeric
grep( "[[:digit:]]*", 123)
# convert all the columns with numbers to numeric
grepl( "[[:digit:]]*", 123)
# convert all the columns with numbers to numeric
grepl( "[[:digits:]]*", 123)
# convert all the columns with numbers to numeric
grepl( "[[:digit:]]+", 123)
# convert all the columns with numbers to numeric
grepl( "[[:digit:]]+", "123")
apply(sqf.2023, 2, function(col) { grepl("[[:digit:]]", col)})
apply(sqf.2023, 2, function(col) { all(grepl("[[:digit:]]", col)) })
col.names
# Apply the transformation to all columns that match the pattern
sqf.2023[, (col.names) := lapply(.SD, function(x) {
if (all(is.na(x) | grepl("[[:digit:]]+", x))) as.numeric(x) else x
}), .SDcols = col.names]
glimpse(sqf.2023)
unique(sqf.$SUSPECT_REPORTED_AGE)
unique(sqf.2023$SUSPECT_REPORTED_AGE)
which(sqf.2023$SUSPECT_REPORTED_AGE == "N")
row.idx <- which(sqf.2023$SUSPECT_REPORTED_AGE == "N")
sqf.2023[row.idx, ]
sqf.2023[row.idx, "SUSPECT_REPORTED_AGE"]
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
enough.data.cols <- names(which(na.count < 0.15))
cols.to.keep <- sqf.2023[, names(sqf.2023) %in% enough.data.cols]
sqf.2023 <- sqf.2023[, ..cols.to.keep]
targets <- c("SUSPECT_ARRESTED_FLAG", "SEARCHED_FLAG", "FRISKED_FLAG")
protected.a <- c("SUSPECT_SEX", "SUSPECT_RACE_DESCRIPTION")
# remove all officer columns
# pattern.officer <- "[:alpha:]*_OFFICER_[:alpha:]*"
# officer.cols <- grep(pattern.officer, names(sqf.2023))
# sqf.2023[, (officer.cols) := NULL]
# # remove all location columns except STOP_LOCATION_BORO_NAME
# pattern.location <- "[:alpha:]*_LOCATION_[:alpha:]*"
# location.cols <- grep(pattern.location, names(sqf.2023))
# sqf.2023[, (location.cols[-length(location.cols)]) := NULL]
# remove all columns that start with PHYSICAL_FORCE
# pattern.force <- "PHYSICAL_FORCE[:alpha:]*"
# force.cols <- grep(pattern.force, names(sqf.2023))
# sqf.2023[, (force.cols) := NULL]
# remove all columns relted to summons
# pattern.summons <- "SUMMONS[:alpha:]*"
# summons.cols <- grep(pattern.summons, names(sqf.2023))
# sqf.2023[, (summons.cols) := NULL]
# remove all columns without specifc pattern
sqf.2023$YEAR2 <- NULL
sqf.2023$STOP_FRISK_DATE <- NULL
sqf.2023$RECORD_STATUS_CODE <- NULL
# sqf.2023$DEMEANOR_OF_PERSON_STOPPED <- NULL
sqf.2023$SUPERVISING_ACTION_CORRESPONDING_ACTIVITY_LOG_ENTRY_REVIEWED <- NULL
glimpse(sqf.2023)
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
glimpse(sqf.2023)
source("~/Documents/NYPD_SQF_data/setup.R")
glimpse(sqf.2023)
summary(sqf.2023)
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.ranger", mtry = ceiling(p / 2), predict_type = "prob", importance = "impurity")
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# split
splits_arrested <- partition(tsk_arrested_full)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
as.data.table(mlr_learners)
mlr_learners$get("classif.featureless")
lrn("classif.rpart")
as.data.table(mlr_learners)
as.data.table(mlr_learners)[,label == "Random Forrest"]
as.data.table(mlr_learners)[label == "Random Forrest"]
as.data.frame(mlr_learners)[label == "Random Forrest"]
as.data.table(mlr_learners)[label == "Random Forrest"]
as.data.table(mlr_learners)[label == "Random Forest"]
lrn_rf <- lrn("classif.randomForest", mtry = ceiling(p / 2), predict_type = "prob", importance = "impurity")
install.packages("randomForest")
library(randomForest)
lrn_rf <- lrn("classif.randomForest", mtry = ceiling(p / 2), predict_type = "prob", importance = "impurity")
lrn_rf <- lrn("classif.randomForest")
library(randomForest)
lrn_rf <- lrn("classif.randomForest")
install.packages("mlr3extralearners")
library(mlr3extralearners)
library(mlr3extralearners)
library(mlr3extralearners)
install.packages("mlr3extralearners")
version
version()
remotes::install_github("mlr-org/mlr3extralearners@*release")
library(mlr3extralearners)
lrn_rf <- lrn("classif.randomForest")
lrn_rf
### --- Missing data analysis --- ###
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
sqf.2023[is.na(SUSPECT_SEX)]
View(sqf.2023[is.na(SUSPECT_SEX)])
sort(na.count)
md.pattern(sqf.2023)
install.packages("BaylorEdPsych")
library(BaylorEdPsych)
install.packages("BaylorEdPsych")
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
# setup script
set.seed(024)
library(data.table)
library(readxl)
library(ggplot2)
library(pROC)
library(tidyverse)
library(mlr3verse)
library(mlr3fairness)
library(mice)
library(checkmate)
library(iml)
library(fairml)
library(linprog)
library(CVXR)
library(randomForest)
library(mlr3extralearners)
sqf.2023 <- read_excel("data/sqf-2023.xlsx")
setDT(sqf.2023)
n <- nrow(sqf.2023)
sqf.2023[sqf.2023 == "(null)"] <- NA
# count the missing values in each column
na.count <- apply(sqf.2023, 2, function(x) sum(is.na(x))) / nrow(sqf.2023)
sort(na.count)
# Count missing values per row
row_missing <- rowSums(is.na(data))
# Count missing values per row
row_missing <- rowSums(is.na(sqf.2023))
# Summarize rows with different numbers of missing values
table(row_missing)
row_missing
set.seed(123)  # For reproducibility
# Take a random sample of 500 observations
sampled_data <- data[sample(nrow(data), 500), ]
# Take a random sample of 500 observations
sampled_data <- data[sample(nrow(sqf.2023), 500), ]
set.seed(123)  # For reproducibility
# Take a random sample of 500 observations
sampled_data <- sqf.2023[sample(nrow(sqf.2023), 500), ]
# Visualize missing data patterns for the subset
md.pattern(sampled_data)
# Take a random sample of 500 observations
sampled_data <- sqf.2023[sample(nrow(sqf.2023), 50), ]
# Visualize missing data patterns for the subset
md.pattern(sampled_data)
source("~/Documents/NYPD_SQF_data/setup.R")
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.randomForest")
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# split
splits_arrested <- partition(tsk_arrested_full)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
glimpse(sqf.2023)
char.cols
source("~/Documents/NYPD_SQF_data/setup.R")
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.randomForest")
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# split
splits_arrested <- partition(tsk_arrested_full)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.ranger")
# construct a resampling strategy
cv5 <- rsmp("cv", folds = 5)
# set performance measures
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# split
splits_arrested <- partition(tsk_arrested_full)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
as.data.table(mlr_learners)
# setup script
set.seed(024)
library(data.table)
library(readxl)
library(ggplot2)
library(pROC)
library(tidyverse)
library(mlr3verse)
library(mlr3fairness)
library(mice)
library(checkmate)
library(iml)
library(fairml)
library(linprog)
library(CVXR)
library(randomForest)
library(mlr3extralearners)
as.data.table(mlr3learners)
as.data.table(mlr_learners)
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.random_tree")
# construct a resampling strategy
cv5 <- rsmp("cv", folds = 5)
# set performance measures
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# split
splits_arrested <- partition(tsk_arrested_full)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
install.packages("RWeka")
library(RWeka)
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.random_tree")
# construct a resampling strategy
cv5 <- rsmp("cv", folds = 5)
# set performance measures
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# split
splits_arrested <- partition(tsk_arrested_full)
lrn_rf$train(tsk_arrested_full, row_ids = splits_arrested$train)
predictions_arrested <- lrn_rf$predict(tsk_arrested_full, row_ids = splits_arrested$test)
predictions_arrested
# test mlr3 fairness metrics
# initialize fairness measure
# punitive
fairness_msr_punitive <- msrs(c("fairness.fpr","fairness.tnr","fairness.ppv"))
# "fairness.fdr" (not implemented but should be as equivalent for fairness.fomr)
predictions_arrested$score(fairness_msr_punitive, task = tsk_frisk)
res1 <- calcGroupwiseMetrics(base_mrs_punitive, tsk_arrest, predictions_arrested)
res1
res1 <- calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested)
# Defines punitive base measures
base_mrs_punitive <- list(
fpr = msr("classif.fpr"),
tnr = msr("classif.tnr"),
ppv = msr("classif.ppv"),
fdr = msr("classif.fdr")
)
# Define multiple base measures
base_mrs_assistive <- list(
fnr = msr("classif.fnr"),
tpr = msr("classif.tpr"),
npv = msr("classif.npv"),
fomr = msr("classif.fomr")
)
# define mixed base measures
base_mrs_other <- list(
acc = msr("classif.acc"),
auc = msr("classif.auc"),
bbrier = msr("classif.bbrier")
)
res1 <- calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested)
# set PA
tsk_arrested_full$col_roles$pta <- "SUSPECT_SEX"
lrn_rf()
lrn_rf
res1 <- calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested)
res2 <- calcGroupwiseMetrics(base_mrs_assistive, tsk_arrested_full, predictions_arrested)
res2
res3 <- calcGroupwiseMetrics(base_mrs_other, tsk_arrested_full, predictions_arrested)
res1
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested)
sqf.2023[is.na(SUSPECT_ARRESTED_FLAG)]
is.na(sqf.2023$SUSPECT_ARRESTED_FLAG)
sum(is.na(sqf.2023$SUSPECT_ARRESTED_FLAG))
sum(is.na(sqf.2023$SUSPECT_SEX))
# filter out complete cases
sqf.2023 <- sqf.2023[complete.cases(sqf.2023), ]
source("~/Documents/NYPD_SQF_data/program/data_cleaning.R")
# filter out complete cases
sqf.2023.filtered <- sqf.2023[complete.cases(sqf.2023), ]
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.ranger")
lrn_rf_missing <- lrn("classif.random_tree")
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# set PA
tsk_arrested_full$col_roles$pta <- "SUSPECT_SEX"
# split
splits_arrested_full <- partition(tsk_arrested_full)
# train
lrn_rf_missing$train(tsk_arrested_full, row_ids = splits_arrested_full$train)
# predict
predictions_arrested_full <- lrn_rf_missing$predict(tsk_arrested_full, row_ids = splits_arrested_full$test)
### --- arrested specific --- ###
# initialize a classification task
tsk_arrested <- as_task_classif(sqf.2023.filtered, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrest")
# specify the PA
tsk_arrested$col_roles$pta <- "SUSPECT_SEX"
# create train train split
splits_arrested <- partition(tsk_arrested)
# train
lrn_rf$train(tsk_arrested, row_ids = splits_arrested$train)
# make predictions on test data
predictions_arrested <- lrn_rf$predict(tsk_arrested, row_ids = splits_arrested$test)
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_assistive, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_other, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested_full)
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested_full)
calcGroupwiseMetrics(base_mrs_assistive, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_assistive, tsk_arrested_full, predictions_arrested_full)
calcGroupwiseMetrics(base_mrs_other, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_other, tsk_arrested_full, predictions_arrested_full)
source("~/Documents/NYPD_SQF_data/setup.R")
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.ranger")
lrn_rf_missing <- lrn("classif.random_tree")
# construct a resampling strategy
cv5 <- rsmp("cv", folds = 5)
# set performance measures
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# set PA
tsk_arrested_full$col_roles$pta <- "SUSPECT_SEX"
# split
splits_arrested_full <- partition(tsk_arrested_full)
# train
lrn_rf_missing$train(tsk_arrested_full, row_ids = splits_arrested_full$train)
# predict
predictions_arrested_full <- lrn_rf_missing$predict(tsk_arrested_full, row_ids = splits_arrested_full$test)
### --- arrested specific --- ###
# initialize a classification task
tsk_arrested <- as_task_classif(sqf.2023.filtered, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrest")
glimpse(sqf.2023)
glimpse(sqf.2023.filtered)
source("~/Documents/NYPD_SQF_data/setup.R")
source("~/Documents/NYPD_SQF_data/setup.R")
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.ranger")
lrn_rf_missing <- lrn("classif.random_tree")
# construct a resampling strategy
cv5 <- rsmp("cv", folds = 5)
# set performance measures
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# set PA
tsk_arrested_full$col_roles$pta <- "SUSPECT_SEX"
# split
splits_arrested_full <- partition(tsk_arrested_full)
# train
lrn_rf_missing$train(tsk_arrested_full, row_ids = splits_arrested_full$train)
# predict
predictions_arrested_full <- lrn_rf_missing$predict(tsk_arrested_full, row_ids = splits_arrested_full$test)
### --- arrested specific --- ###
# initialize a classification task
tsk_arrested <- as_task_classif(sqf.2023.filtered, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrest")
# specify the PA
tsk_arrested$col_roles$pta <- "SUSPECT_SEX"
# create train train split
splits_arrested <- partition(tsk_arrested)
# train
lrn_rf$train(tsk_arrested, row_ids = splits_arrested$train)
# make predictions on test data
predictions_arrested <- lrn_rf$predict(tsk_arrested, row_ids = splits_arrested$test)
predictions_dt <- as.data.table(predictions_arrested)
pa.data <- imputed_data_arrested[splits_arrested$test, .(SUSPECT_SEX)]
predictions_dt <- cbind(pa.data, predictions_dt)
# Defines punitive base measures
base_mrs_punitive <- list(
fpr = msr("classif.fpr"),
tnr = msr("classif.tnr"),
ppv = msr("classif.ppv"),
fdr = msr("classif.fdr")
)
# Define multiple base measures
base_mrs_assistive <- list(
fnr = msr("classif.fnr"),
tpr = msr("classif.tpr"),
npv = msr("classif.npv"),
fomr = msr("classif.fomr")
)
# define mixed base measures
base_mrs_other <- list(
acc = msr("classif.acc"),
auc = msr("classif.auc"),
bbrier = msr("classif.bbrier")
)
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_other, tsk_arrested, predictions_arrested)
calcGroupwiseMetrics(base_mrs_punitive, tsk_arrested_full, predictions_arrested_full)
calcGroupwiseMetrics(base_mrs_other, tsk_arrested_full, predictions_arrested_full)
nrow(sqf.2023.filtered) / nrow(sqf.2023)
1-0.6584141
11143 / 16924
data <- data.frame(
X1 = c("A", "B", "A", NA, "B"),
X2 = c(1, 2, 1, 2, 2),
Y  = c(1, 0, 1, 1, 0)
)
# Fit RandomTree
model <- RandomTree(Y ~ X1 + X2, data = data)
library(RWeka)
data <- data.frame(
X1 = c("A", "B", "A", NA, "B"),
X2 = c(1, 2, 1, 2, 2),
Y  = c(1, 0, 1, 1, 0)
)
# Fit RandomTree
model <- RandomTree(Y ~ X1 + X2, data = data)
data <- data.frame(
X1 = c("A", "B", "A", NA, "B"),
X2 = c(1, 2, 1, 2, 2),
Y  = c(1, 0, 1, 1, 0)
)
tsk.test <- as_task_classif(data, target = "Y", positive = "1")
tsk.test
# Fit RandomTree
model <- lrn_rf_missing$train(tsk.test)
library(RWeka)
data <- data.frame(
X1 = c("A", "B", "A", NA, "B"),
X2 = c(1, 2, 1, 2, 2),
Y  = c(1, 0, 1, 1, 0)
)
tsk.test <- as_task_classif(data, target = "Y", positive = "1")
# Fit RandomTree
model <- lrn_rf_missing$train(tsk.test)
library(RWeka)
data <- data.frame(
X1 = factor("A", "B", "A", NA, "B"),
X2 = c(1, 2, 1, 2, 2),
Y  = c(1, 0, 1, 1, 0)
)
data <- data.frame(
X1 = c(4, 5, 6, NA, 5),
X2 = c(1, 2, 1, 2, 2),
Y  = c(1, 0, 1, 1, 0)
)
tsk.test <- as_task_classif(data, target = "Y", positive = "1")
# Fit RandomTree
model <- lrn_rf_missing$train(tsk.test)
# Inspect the model
summary(model)
lrn_rf_missing <- lrn("classif.random_forest_weka")
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
source("~/Documents/NYPD_SQF_data/setup.R")
# initialize a learner
p <- ncol(imputed_data_frisked) - 1
lrn_rf <- lrn("classif.ranger")
lrn_rf_missing <- lrn("classif.random_forest_weka")
# construct a resampling strategy
cv5 <- rsmp("cv", folds = 5)
# set performance measures
measures <- msrs(c("classif.acc", "classif.bbrier", "classif.auc"))
### ARRESTED full dataset ###
tsk_arrested_full <- as_task_classif(sqf.2023, target = "SUSPECT_ARRESTED_FLAG",
positive = "1", id = "arrested w/ missing")
# set PA
tsk_arrested_full$col_roles$pta <- "SUSPECT_SEX"
# split
splits_arrested_full <- partition(tsk_arrested_full)
# train
lrn_rf_missing$train(tsk_arrested_full, row_ids = splits_arrested_full$train)
predictions_arrested_full
splits_arrested_full
# train
lrn_rf_missing$train(tsk_arrested_full, row_ids = splits_arrested_full$train)
